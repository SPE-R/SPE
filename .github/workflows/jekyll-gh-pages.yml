# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy SPE-R GitHub Pages using Jekyll

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master-gh-actions"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install curl
        run: |
          sudo apt-get install -y libcurl4-openssl-dev
      - name: Setup TeX Live 2023
        uses: teatimeguest/setup-texlive-action@v2
        with:
          version: 2023
      - name: Install tinytex
        uses: r-lib/actions/setup-tinytex@v2
      - name: Install latex libraries
        run: |
          tlmgr install caption currfile datetime enumitem eso-pic fancyhdr floatflt fmtcount grfext grffile needspace nth oberdiek pdflscape pdfpages subfig
          echo 'Make the latex R style libs accessible'
          cp -rf /usr/share/texmf/tex/latex/R/tex /home/runner/.TinyTeX/texmf-dist
          texhash
      - name: Install R
        uses: r-lib/actions/setup-r@v2
      #- name: Install R packages
      #  uses: r-lib/actions/setup-renv@v2
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
      - name: Build SPE material
        run: |
          echo 'Build an compile all the practicals pdf'
          make -f pracs/Makefile
          echo 'Build the practicals solutions R files'
          make -f pracs/Makefile Rsol
          echo 'Compile lectures handout'
          make -f lectures/Makefile
          echo 'Update the software and package requirement page'
          Rscript -e 'rmarkdown::render("pracs/prerequest.Rmd", output_dir = "build")'
          echo 'keep only the outputs we are interested in'
          mkdir -p deploy
          mkdir -p deploy/Rsolutions
          cp build/pracs.pdf deploy/
          cp build/pracs-sol.pdf deploy/
          cp build/*-s.R deploy/Rsolutions
          cp build/prerequest.md deploy/
          cp -r pracs/data  deploy/
          cp build-lectures/SPE-2019-lectures-3x1.pdf deploy/
          echo 'zip data and Rsolutions directory'
          cd deploy
          zip -r SPE-all-material.zip *
          zip -r data.zip data
          zip -r Rsolutions.zip Rsolutions
          echo 'clean the build environement'
          cd ..
          make -f pracs/Makefile clean
          make -f lectures/Makefile clean
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: SPE-all-material
          path: deploy
      
          
      # - name: Setup Pages
      #   uses: actions/configure-pages@v3
      # - name: Build with Jekyll
      #   uses: actions/jekyll-build-pages@v1
      #   with:
      #     source: ./
      #     destination: ./_site
      # - name: Upload artifact
      #   uses: actions/upload-pages-artifact@v1

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
